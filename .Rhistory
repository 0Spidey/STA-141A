contL = rep(0, nTrial),
sumSpk = rep(0,nTrial),
avgSpk= rep(0,nTrial),
feedbackType = rep(0, nTrial),
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
session2 <- dataSummary(2)
session3 <- dataSummary(3)
session4 <- dataSummary(4)
session5 <- dataSummary(5)
session6 <- dataSummary(6)
session7 <- dataSummary(7)
session8 <- dataSummary(8)
session9 <- dataSummary(9)
session10 <- dataSummary(10)
session11 <- dataSummary(11)
session12 <- dataSummary(12)
session13 <- dataSummary(13)
session14 <- dataSummary(14)
session15 <- dataSummary(15)
session16 <- dataSummary(16)
session17 <- dataSummary(17)
session18 <- dataSummary(18)
combinedSessions <- rbind(session1, session2, session3, session4, session5,
session6, session7, session8, session9, session10,
session11, session12, session13, session14, session15,
session16, session17, session18)
# Fit the model
model <- glm(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions, family = "binomial")
# Print the summary of the model
summary(model)
#creating a DATA Frame
dataSummary = function(is) {
nTrial = length(session[[is]]$feedback_type) #Represents the trials
metaTrial = tibble(
sessionNum = rep(0,nTrial),
mouseName = rep('name', nTrial),
trialNum = rep(0,nTrial),
contR= rep(0,nTrial),
contL = rep(0, nTrial),
sumSpk = rep(0,nTrial),
avgSpk= rep(0,nTrial),
feedbackType = rep(0, nTrial),
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
session2 <- dataSummary(2)
session3 <- dataSummary(3)
session4 <- dataSummary(4)
session5 <- dataSummary(5)
session6 <- dataSummary(6)
session7 <- dataSummary(7)
session8 <- dataSummary(8)
session9 <- dataSummary(9)
session10 <- dataSummary(10)
session11 <- dataSummary(11)
session12 <- dataSummary(12)
session13 <- dataSummary(13)
session14 <- dataSummary(14)
session15 <- dataSummary(15)
session16 <- dataSummary(16)
session17 <- dataSummary(17)
session18 <- dataSummary(18)
combinedSessions <- rbind(session1, session2, session3, session4, session5,
session6, session7, session8, session9, session10,
session11, session12, session13, session14, session15,
session16, session17, session18)
# Fit the model
model <- lm(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
# Print the summary of the model
summary(model)
# Fit the model
logitModel <- glm(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions, family = "binomial")
# Print the summary of the model
summary(model)
# b Computing the confusion matrix for the test data, and the misclassification errors
# Predict the species in the test data
logitPredictProb <- predict(logitModel, newdata = testData, type = "response")
install.packages("MASS")
install.packages("MASS")
installed.packages('tidyverse')
installed.packages('knitr')
installed.packages('dplyr')
suppressWarnings(library(tidyverse))
suppressWarnings(library(knitr))
suppressWarnings(library(dplyr))
install.packages("MASS")
suppressWarnings(library(MASS))
# Load the data
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/PC/Desktop/141/session/session',i,'.rds',sep=''))
}
ldaModel <- lda(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
installed.packages('tidyverse')
installed.packages('knitr')
installed.packages('dplyr')
suppressWarnings(library(tidyverse))
suppressWarnings(library(knitr))
suppressWarnings(library(dplyr))
install.packages("MASS")
suppressWarnings(library(MASS))
# Load the data
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/PC/Desktop/141/session/session',i,'.rds',sep=''))
}
#creating a DATA Frame
dataSummary = function(is) {
nTrial = length(session[[is]]$feedback_type) #Represents the trials
metaTrial = tibble(
sessionNum = rep(0,nTrial), #Session
mouseName = rep('name', nTrial), # mouse
trialNum = rep(0,nTrial), # trial
contR= rep(0,nTrial), # right
contL = rep(0, nTrial), # left
sumSpk = rep(0,nTrial),#sum
avgSpk= rep(0,nTrial),# mean
feedbackType = rep(0, nTrial),#feedback
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
#creating a DATA Frame
dataSummary = function(is) {
nTrial = length(session[[is]]$feedback_type) #Represents the trials
metaTrial = tibble(
sessionNum = rep(0,nTrial), #Session
mouseName = rep('name', nTrial), # mouse
trialNum = rep(0,nTrial), # trial
contR= rep(0,nTrial), # right
contL = rep(0, nTrial), # left
sumSpk = rep(0,nTrial),#sum
avgSpk= rep(0,nTrial),# mean
feedbackType = rep(0, nTrial),#feedback
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
installed.packages('tidyverse')
installed.packages('knitr')
installed.packages('dplyr')
suppressWarnings(library(tidyverse))
suppressWarnings(library(knitr))
suppressWarnings(library(dplyr))
install.packages("MASS")
suppressWarnings(library(MASS))
# Load the data
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/PC/Desktop/141/session/session',i,'.rds',sep=''))
}
#Using LDA to predict
ldaModel <- lda(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
#Using LDA to predict
library(MASS)
ldaModel <- lda(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
installed.packages('tidyverse')
installed.packages('knitr')
installed.packages('dplyr')
suppressWarnings(library(tidyverse))
suppressWarnings(library(knitr))
suppressWarnings(library(dplyr))
install.packages("MASS")
suppressWarnings(library(MASS))
# Load the data
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/PC/Desktop/141/session/session',i,'.rds',sep=''))
}
# Summarize the information across sessions:
# Knowing what summary we want to report, we can create a tibble:
# All values in this function serve only as place holders
n.session=length(session)
# in library tidyverse
meta <- tibble(
mouseName = rep('name',n.session),
date_exp =rep('dt',n.session),
difbrainArea = rep(0,n.session),
difNeurons = rep(0,n.session),
difTrials = rep(0,n.session),
successRate = rep(0,n.session)
)
for(i in 1:n.session){
tmp = session[[i]];
meta[i,1]=tmp$mouse_name;
meta[i,2]=tmp$date_exp;
meta[i,3]=length(unique(tmp$brain_area));
meta[i,4]=dim(tmp$spks[[1]])[1];
meta[i,5]=length(tmp$feedback_type);
meta[i,6]=mean(tmp$feedback_type+1)/2;
}
# In package knitr
kable(meta, format = "html", table.attr = "class='table table-striped'",digits=2)
i.s=3 # indicator for this session
i.t=1 # indicator for this trial
spk.trial = session[[i.s]]$spks[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
spk.average.tapply=tapply(spk.count, area, mean)
tmp <- data.frame(
area = area,
spikes = spk.count
)
spk.average.dplyr =tmp %>%
group_by(area) %>%
summarize(mean= mean(spikes))
# Wrapping up the function:
average_spike_area<-function(i.t,this_session){
spk.trial = this_session$spks[[i.t]]
area= this_session$brain_area
spk.count=apply(spk.trial,1,sum)
spk.average.tapply=tapply(spk.count, area, mean)
return(spk.average.tapply)
}
average_spike_area(1,this_session = session[[i.s]])
n.trial=length(session[[i.s]]$feedback_type)
n.area=length(unique(session[[i.s]]$brain_area ))
trial.summary =matrix(nrow=n.trial,ncol= n.area+1+2+1)
for(i.t in 1:n.trial){
trial.summary[i.t,]=c(average_spike_area(i.t,this_session = session[[i.s]]),
session[[i.s]]$feedback_type[i.t],
session[[i.s]]$contrast_left[i.t],
session[[i.s]]$contrast_right[i.t],
i.t)
}
colnames(trial.summary)=c(names(average_spike_area(i.t,this_session = session[[i.s]])), 'feedback', 'left contr.','right contr.','id' )
trial.summary <- as_tibble(trial.summary)
# Creating a vector of distinct colors for each brain area
area.col=rainbow(n=n.area,alpha=0.7)
# Plotting a blank plot before drawing anything on it
plot(x=1,y=0, col='white',xlim=c(0,n.trial),ylim=c(0.5,2.2), xlab="Trials",ylab="Average spike counts", main=paste("Spikes per area in Session", i.s))
for(i in 1:n.area){
# Plotting each area's line and its smoothed version
lines(y=trial.summary[[i]],x=trial.summary$id,col=area.col[i],lty=2,lwd=1)
lines(smooth.spline(trial.summary$id, trial.summary[[i]]),col=area.col[i],lwd=3)
}
# Adding a legend to the plot
legend("topright",
legend = colnames(trial.summary)[1:n.area],
col = area.col,
lty = 1,
cex = 0.8
)
i.s=3 # indicator for this session
i.t=1 # indicator for this trial
spk.trial = session[[i.s]]$spks[[i.t]]
n.neuron = dim(spk.trial)[1]
area = session[[i.s]]$brain_area
# Creating a data frame for the raster plot
spike_df <- data.frame(
neuron = rep(1:n.neuron, each = length(spk.trial[1,])),
time = rep(1:length(spk.trial[1,]), times = n.neuron),
spike = as.vector(t(spk.trial)) # Transpose the matrix before turning it into a vector
)
# Creating a subset of the data for the spikes only
spike_df_spike_only <- spike_df[spike_df$spike == 1,]
install.packages("viridis")
#creating a DATA Frame
dataSummary = function(is) {
nTrial = length(session[[is]]$feedback_type) #Represents the trials
metaTrial = tibble(
sessionNum = rep(0,nTrial), #Session
mouseName = rep('name', nTrial), # mouse
trialNum = rep(0,nTrial), # trial
contR= rep(0,nTrial), # right
contL = rep(0, nTrial), # left
sumSpk = rep(0,nTrial),#sum
avgSpk= rep(0,nTrial),# mean
feedbackType = rep(0, nTrial),#feedback
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
installed.packages('tidyverse')
installed.packages('knitr')
installed.packages('dplyr')
suppressWarnings(library(tidyverse))
suppressWarnings(library(knitr))
suppressWarnings(library(dplyr))
# Load the data
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/PC/Desktop/141/session/session',i,'.rds',sep=''))
}
# Summarize the information across sessions:
# Knowing what summary we want to report, we can create a tibble:
# All values in this function serve only as place holders
n.session=length(session)
# in library tidyverse
meta <- tibble(
mouseName = rep('name',n.session),
date_exp =rep('dt',n.session),
difbrainArea = rep(0,n.session),
difNeurons = rep(0,n.session),
difTrials = rep(0,n.session),
successRate = rep(0,n.session)
)
for(i in 1:n.session){
tmp = session[[i]];
meta[i,1]=tmp$mouse_name;
meta[i,2]=tmp$date_exp;
meta[i,3]=length(unique(tmp$brain_area));
meta[i,4]=dim(tmp$spks[[1]])[1];
meta[i,5]=length(tmp$feedback_type);
meta[i,6]=mean(tmp$feedback_type+1)/2;
}
# In package knitr
kable(meta, format = "html", table.attr = "class='table table-striped'",digits=2)
i.s=3 # indicator for this session
i.t=1 # indicator for this trial
spk.trial = session[[i.s]]$spks[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
spk.average.tapply=tapply(spk.count, area, mean)
tmp <- data.frame(
area = area,
spikes = spk.count
)
spk.average.dplyr =tmp %>%
group_by(area) %>%
summarize(mean= mean(spikes))
# Wrapping up the function:
average_spike_area<-function(i.t,this_session){
spk.trial = this_session$spks[[i.t]]
area= this_session$brain_area
spk.count=apply(spk.trial,1,sum)
spk.average.tapply=tapply(spk.count, area, mean)
return(spk.average.tapply)
}
average_spike_area(1,this_session = session[[i.s]])
n.trial=length(session[[i.s]]$feedback_type)
n.area=length(unique(session[[i.s]]$brain_area ))
trial.summary =matrix(nrow=n.trial,ncol= n.area+1+2+1)
for(i.t in 1:n.trial){
trial.summary[i.t,]=c(average_spike_area(i.t,this_session = session[[i.s]]),
session[[i.s]]$feedback_type[i.t],
session[[i.s]]$contrast_left[i.t],
session[[i.s]]$contrast_right[i.t],
i.t)
}
colnames(trial.summary)=c(names(average_spike_area(i.t,this_session = session[[i.s]])), 'feedback', 'left contr.','right contr.','id' )
trial.summary <- as_tibble(trial.summary)
# Creating a vector of distinct colors for each brain area
area.col=rainbow(n=n.area,alpha=0.7)
# Plotting a blank plot before drawing anything on it
plot(x=1,y=0, col='white',xlim=c(0,n.trial),ylim=c(0.5,2.2), xlab="Trials",ylab="Average spike counts", main=paste("Spikes per area in Session", i.s))
for(i in 1:n.area){
# Plotting each area's line and its smoothed version
lines(y=trial.summary[[i]],x=trial.summary$id,col=area.col[i],lty=2,lwd=1)
lines(smooth.spline(trial.summary$id, trial.summary[[i]]),col=area.col[i],lwd=3)
}
# Adding a legend to the plot
legend("topright",
legend = colnames(trial.summary)[1:n.area],
col = area.col,
lty = 1,
cex = 0.8
)
i.s=3 # indicator for this session
i.t=1 # indicator for this trial
spk.trial = session[[i.s]]$spks[[i.t]]
n.neuron = dim(spk.trial)[1]
area = session[[i.s]]$brain_area
# Creating a data frame for the raster plot
spike_df <- data.frame(
neuron = rep(1:n.neuron, each = length(spk.trial[1,])),
time = rep(1:length(spk.trial[1,]), times = n.neuron),
spike = as.vector(t(spk.trial)) # Transpose the matrix before turning it into a vector
)
# Creating a subset of the data for the spikes only
spike_df_spike_only <- spike_df[spike_df$spike == 1,]
install.packages("viridis")
library(viridis)
# Plotting the raster plot
ggplot(spike_df_spike_only, aes(x = time, y = neuron, color = neuron)) +
geom_point(size = 0.1) +
scale_color_gradient(low = "blue", high = "red") + # Here, we use a gradient from blue to red
labs(x = "Time", y = "Neuron",
title = paste("Spike raster plot for trial", i.t, "in Session", i.s)) +
theme_minimal() # Remove/comment this line if you want the legend to be shown
#creating a DATA Frame
dataSummary = function(is) {
nTrial = length(session[[is]]$feedback_type) #Represents the trials
metaTrial = tibble(
sessionNum = rep(0,nTrial), #Session
mouseName = rep('name', nTrial), # mouse
trialNum = rep(0,nTrial), # trial
contR= rep(0,nTrial), # right
contL = rep(0, nTrial), # left
sumSpk = rep(0,nTrial),#sum
avgSpk= rep(0,nTrial),# mean
feedbackType = rep(0, nTrial),#feedback
)
for(i in 1:nTrial){
tmp= session[[is]];
metaTrial[i,1] = is;
metaTrial[i,2] = tmp$mouse_name;
metaTrial[i,3] = i;
metaTrial[i,4] = tmp$contrast_right[i];
metaTrial[i,5] = tmp$contrast_left[i];
metaTrial[i,6] = sum(tmp$spks[[i]]);
metaTrial[i,7] = mean(tmp$spks[[i]]);
metaTrial[i,8] = tmp$feedback_type[i];
}
return(metaTrial)
}
session1 <- dataSummary(1)
session2 <- dataSummary(2)
session3 <- dataSummary(3)
session4 <- dataSummary(4)
session5 <- dataSummary(5)
session6 <- dataSummary(6)
session7 <- dataSummary(7)
session8 <- dataSummary(8)
session9 <- dataSummary(9)
session10 <- dataSummary(10)
session11 <- dataSummary(11)
session12 <- dataSummary(12)
session13 <- dataSummary(13)
session14 <- dataSummary(14)
session15 <- dataSummary(15)
session16 <- dataSummary(16)
session17 <- dataSummary(17)
session18 <- dataSummary(18)
combinedSessions <- rbind(session1, session2, session3, session4, session5,
session6, session7, session8, session9, session10,
session11, session12, session13, session14, session15,
session16, session17, session18)
#Using LDA to predict
library(MASS)
ldaModel <- lda(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
spks.trial=session[[3]]$spks[[1]]
total.spikes=apply(spks.trial,1,sum)
(avg.spikes=mean(total.spikes))
averageSpikesession <- function(this_session){
n.trial = length(this_session$feedback_type)
avgSpikespertrial = numeric(n.trial)
for(i.t in 1:n.trial){
spk.trial = this_session$spks[[i.t]]
total_spikes = sum(apply(spk.trial, 1, sum))
avgSpikespertrial[i.t] = total_spikes / nrow(spk.trial)
}
return(mean(avgSpikespertrial))
}
# Now, add this new feature to the 'meta' table for each session
meta$avgSpikespersession  <- unlist(lapply(session, averageSpikesession))
kable(meta, format = "html", table.attr = "class='table table-striped'",digits=2)
ggplot(meta, aes(x = seq_len(nrow(meta)), y = avgSpikespersession)) +
geom_line(color = "blue") +
labs(x = "Session", y = "Average Spike Count", title = "Average Spike Count per Trial (averaged across trials) for Each Session")
#Using LDA to predict
library(dplyr)
ldaModel <- lda(avgSpk ~ trialNum + contR + contL + sumSpk + feedbackType, data = combinedSessions)
